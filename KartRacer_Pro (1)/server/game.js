const { v4: uuidv4 } = require('uuid');
const Physics = require('./lib/physics');
class Game {
  constructor(roomId, io, opts={}){
    this.roomId = roomId; this.io = io; this.playerManager = null; this.tickRate = opts.tickRate || 60; this.stateRate = opts.stateRate || 20; this.roundTime = opts.roundTime || 90; this.track = this.createTrack(); this.items = {}; this.bots={}; this.spawnBots = opts.spawnBots||2; this.physics = new Physics();
  }
  setPlayerManager(pm){ this.playerManager = pm; }
  tryStart(){ if (!this.playerManager) return; const players=Object.values(this.playerManager.players); if (players.length===0) return; const allReady = players.every(p=>p.ready); if (!allReady) return; this.startRound(); }
  startRound(){ this.timeLeft=this.roundTime; let i=0; for (const id in this.playerManager.players){ const p=this.playerManager.players[id]; p.x=120+i*60; p.y=300; p.angle=0; p.speed=0; p.lap=0; p.checkpoint=-1; i++; } for (let b=0;b<this.spawnBots;b++){ const bid='bot_'+uuidv4().split('-')[0]; this.playerManager.addPlayer(bid,null,{bot:true,ready:true}); this.bots[bid]={targetIndex:0}; } this.spawnItems(); this.tickInterval=setInterval(()=>this.tick(),1000/this.tickRate); this.stateInterval=setInterval(()=>this.broadcast(),1000/this.stateRate); this.io.to(this.roomId).emit('roundStart',{time:this.timeLeft,track:this.track.meta}); }
  endRound(){ clearInterval(this.tickInterval); clearInterval(this.stateInterval); this.io.to(this.roomId).emit('roundEnd',{players:this.playerManager.summary()}); for (const b in this.bots) this.playerManager.removePlayer(b); this.bots={}; }
  tick(){ for (const bid in this.bots){ const bot=this.playerManager.players[bid]; if (!bot) continue; const t=this.track.checkpoints[this.bots[bid].targetIndex%this.track.checkpoints.length]; const dx=t.x-bot.x; const dy=t.y-bot.y; const angTo=Math.atan2(dy,dx); let da=angTo-bot.angle; da=Math.atan2(Math.sin(da),Math.cos(da)); bot.steer=Math.max(-1,Math.min(1,da*2.2)); bot.throttle=1; const dist=dx*dx+dy*dy; if (dist<1000) this.bots[bid].targetIndex++; } for (const id in this.playerManager.players){ const p=this.playerManager.players[id]; this.physics.update(p, 1/this.tickRate); if (p.x<60) p.x=60; if (p.x>740) p.x=740; if (p.y<60) p.y=60; if (p.y>540) p.y=540; const cp = this.getCheckpointFor(p); if (cp!==p.checkpoint){ if (cp===0 && p.checkpoint===this.track.checkpoints.length-1) p.lap++; p.checkpoint=cp; } } this.checkItems(); this.timeLeft-=1/this.tickRate; if (this.timeLeft<=0) this.endRound(); }
  broadcast(){ this.io.to(this.roomId).emit('state',{players:this.playerManager.summary(), items:this.items, time: Math.round(this.timeLeft)}); }
  createTrack(){ return { meta:{name:'Pro Circuit', laps:3}, checkpoints:[{x:200,y:120,r:60},{x:600,y:120,r:60},{x:600,y:420,r:60},{x:200,y:420,r:60}] }; }
  getCheckpointFor(p){ for (let i=0;i<this.track.checkpoints.length;i++){ const c=this.track.checkpoints[i]; const dx=p.x-c.x; const dy=p.y-c.y; if (dx*dx+dy*dy < c.r*c.r) return i; } return p.checkpoint||-1; }
  spawnItems(){ this.items={}; for (let i=0;i<6;i++){ const id='it'+i; this.items[id]={id, x:100+Math.random()*600, y:100+Math.random()*400, type:i%2?'boost':'banana', active:true}; } }
  checkItems(){ for (const pid in this.playerManager.players){ const p=this.playerManager.players[pid]; for (const iid in this.items){ const it=this.items[iid]; if (!it.active) continue; const dx=p.x-it.x; const dy=p.y-it.y; if (dx*dx+dy*dy < 30*30){ it.active=false; p.powerups=p.powerups||[]; p.powerups.push(it.type); if (!p.isBot && p.socketId) this.io.to(p.socketId).emit('pickup',{type:it.type}); } } } }
  useItem(playerId){ const p=this.playerManager.players[playerId]; if (!p||!p.powerups||!p.powerups.length) return; const it=p.powerups.shift(); if (it==='boost'){ p.speed+=200; } else if (it==='banana'){ const bid='banana_'+Math.floor(Math.random()*10000); this.items[bid]={id:bid,x:p.x+Math.cos(p.angle)*-30,y:p.y+Math.sin(p.angle)*-30,type:'banana',active:true}; } }
}
module.exports = Game;
