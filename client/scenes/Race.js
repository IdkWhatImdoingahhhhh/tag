export default class Race extends Phaser.Scene { constructor(){ super({ key:'Race' }); } init(data){ this.rid = data.rid; this.trackMeta = data.track; this.timeLeft = data.time; } create(){ this.socket = io(); this.add.image(512,384,'track'); this.players={}; this.sprites={}; this.items={}; this.cursors=this.input.keyboard.createCursorKeys(); this.keyUse=this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE); this.socket.on('state', data=>{ for (const id in data.players){ const p=data.players[id]; if (!this.sprites[id]) this.spawn(id,p); else this.applyServerState(id,p); } this.items=data.items||{}; this.renderItems(); }); this.socket.on('pickup', d=> this.sound.play('sfx_pickup')); this.socket.on('roundEnd', data=>{ this.add.rectangle(512,384,800,600,0x000000,0.85); this.add.text(412,300,'Round Over',{fontSize:'28px',fill:'#fff'}); }); this.inputTimer=this.time.addEvent({ delay:50, loop:true, callback: ()=> this.sendInput() }); this.hud=this.add.text(16,16,'', { fontSize:'16px', fill:'#fff' }).setScrollFactor(0); } spawn(id,p){ const s=this.add.sprite(p.x,p.y,'kart'); s.setScale(1.0); this.sprites[id]=s; this.players[id]=p; } applyServerState(id,p){ const s=this.sprites[id]; if (!s) return; const dx=Math.hypot(s.x-p.x, s.y-p.y); const lerp = Math.min(1, 0.08 + dx/300); s.x += (p.x - s.x) * lerp; s.y += (p.y - s.y) * lerp; s.rotation = p.angle; this.players[id]=p; } renderItems(){ if (!this._itemSprites) this._itemSprites={}; for (const k in this._itemSprites) if (!this.items[k]||!this.items[k].active){ this._itemSprites[k].destroy(); delete this._itemSprites[k]; } for (const id in this.items){ const it=this.items[id]; if (!it.active) continue; if (!this._itemSprites[id]){ const sp=this.add.image(it.x,it.y, it.type==='banana'?'banana':'boost'); sp.setScale(0.7); this._itemSprites[id]=sp; } else { this._itemSprites[id].x=it.x; this._itemSprites[id].y=it.y; } } } sendInput(){ const throttle=(this.cursors.up.isDown?1:(this.cursors.down.isDown?-1:0)); const steer=(this.cursors.left.isDown?-1:(this.cursors.right.isDown?1:0)); this.socket.emit('input',{ rid:this.rid, input:{ throttle, steer } }); const local=this.players[this.socket.id]; this.hud.setText('Time:'+this.timeLeft + '\n' + (local?('x:'+Math.round(local.x)+' y:'+Math.round(local.y)):'no local')); } }
